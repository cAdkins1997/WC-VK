#version 460

#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_vote : require

#define vec4 Plane;
struct Frustum {
    Plane planes[6];
};

struct Meshlet {
    uint numPrims;
    uint numVerts;
}

//const uint WORKGROUP_SIZE = EXT_TASK_SUBGROUP_COUNT * EXT_TASK_SUBGROUP_SIZE;
layout(local_size_x = 32) in;

//const uint TASK_MESHLET_ITERATIONS = ((NVMESHLET_PER_TASK + WORKGROUP_SIZE - 1) / WORKGROUP_SIZE);

// UNIFORMS
layout(buffer_reference, std430) readonly buffer VertexBuffer {
    Vertex vertices[];
};

layout(push_constant) uniform constants {
    VertexBuffer vertexBuffer;
    uvec4 geoOffsets;
    uvec4 drawRange;
} PushConstants;

layout(set = 0, binding = 1) uniform SceneData {
    mat4 model;
    mat4 view;
    mat4 perspective;
    Frustum frustum;
    vec3 lightPos;
} sceneData;

struct SharedData {
    vec4 positionTransformation;
    int N;
    int meshletsNumber;
};
taskPayloadSharedEXT SharedData sharedData;

layout(std140, set = 0, binding = 0) uniform  CameraBuffer{
    mat4 proj;
} cameraData;

void main() {

}