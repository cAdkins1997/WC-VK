#version 450

#extension GL_EXT_mesh_shader: require
#extension GL_GOOGLE_include_directive: require
#extension GL_KHR_shader_subgroup_ballot : require

#define vec4 Plane;
#define Frustum Plane[6];

struct SharedData {
    vec4 positionTransformation;
    int N;
    int meshletsNumber;
    float subDimension;
    float cullRadius;
};
taskPayloadSharedEXT SharedData sharedData;

layout(std140, set = 0, binding = 0) uniform  CameraBuffer{
    mat4 proj;
} cameraData;

Frustum compute_frustum(mat4 matrix) {

    Plane left = vec4(
        matrix[0][3] + matrix[0][0],
        matrix[1][3] + matrix[1][0],
        matrix[2][3] + matrix[2][0],
        matrix[3][3] + matrix[3][0]
    );

    Plane right {
        matrix[0][3] - matrix[0][0],
        matrix[1][3] - matrix[1][0],
        matrix[2][3] - matrix[2][0],
        matrix[3][3] - matrix[3][0]
    };

    Plane bottom {
        matrix[3][3] + matrix[3][1],
        matrix[2][3] + matrix[2][1],
        matrix[1][3] + matrix[1][1],
        matrix[0][3] + matrix[0][1]
    };

    Plane top {
        matrix[3][3] - matrix[3][1],
        matrix[2][3] - matrix[2][1],
        matrix[1][3] - matrix[1][1],
        matrix[0][3] - matrix[0][1]
    };

    Plane near {
        matrix[0][3] - matrix[0][2],
        matrix[1][3] - matrix[1][2],
        matrix[2][3] - matrix[2][2],
        matrix[3][3] - matrix[3][2]
    };

    Plane far {
        matrix[0][2],
        matrix[1][2],
        matrix[2][2],
        matrix[3][2]
    };

    return Frustum;
}

void main() {

}